// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Enable Prisma Accelerate for better query performance with serverless/edge functions
// Learn more: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Database connection string from environment
}

// -------- MODELS

model User {
  id         String   @id @default(cuid()) // Unique ID for the user, auto-generated using CUID.
  email      String   @unique // User's email, must be unique for login.
  password   String // Hashed password for user authentication.
  name       String   // User's full name, indexed for faster search queries.
  phone      String? // User's phone number, optional for contact purposes.
  createdAt  DateTime @default(now()) // Timestamp when the user was created.
  updatedAt  DateTime @updatedAt // Timestamp when the user was last updated, auto-updated.
  lastActive DateTime @default(now()) // Timestamp of the user's last activity (e.g., login).
  role       Role     @default(USER) // User's role (USER, ADMIN, or SUPERADMIN).
  isActive   Boolean  @default(true) // Whether the user account is active or disabled.

  // Relations to other models:
  appointments  Appointment[] @relation("BookedUser") // Appointments booked with this user as the service provider.
  bookings      Appointment[] @relation("BookedBy") // Appointments booked by this user for themselves or others.
  adminBookings Appointment[] @relation("CreatedBy") // Appointments created by this user (e.g., by admins).
  address       Address? // Optional address for the user (e.g., home address).
  FAQ           FAQ[] // FAQs created or updated by this user (e.g., by admins).
  Ticket        Ticket[] // Support tickets submitted by this user.
  individual    Individual? // Optional individual profile for users offering personal services.
  businessDetail BusinessDetail[] // Business profiles owned by this user.
  ratings       Rating[]  @relation("UserRatings") // Ratings given by this user for services.
    @@index([name])
}


model Address {
  id      Int    @id @default(autoincrement()) // Auto-incrementing ID
  street  String // Street address
  city    String // City
  country String // Country
  zipCode String // Zip/postal code
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade) // Link to User
  userId  String @unique // Foreign key, one address per user
    individualId String?     @unique
  individual   Individual? @relation(fields: [individualId], references: [id])
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

// Represents a service offered by a business or individual (e.g., "Life Coaching" or "Haircut").
model Service {
  id                  String                @id @default(cuid()) // Unique ID for the service.
  title               String // Name of the service (e.g., "30-min Coaching Session").
  type                ServiceType //whetther it is for virtual(event meeting) or physical
  description         String // Detailed description of the service.
  imageUrl            String?
  imageUrlFileId      String?
  createdAt           DateTime              @default(now()) // When the service was created.
  status              Status                @default(ACTIVE) // Whether the service is active or inactive.
  estimatedDuration   Int // Duration of the service in minutes (e.g., 30).
  price               Float? // Price of the service, optional (e.g., 50.00).
  maxBookings         Int? // Maximum concurrent bookings per time slot, null for unlimited.
  serviceAvailability ServiceAvailability[] // Weekly availability schedules for the service.
  appointments        Appointment[] // Appointments booked for this service.
  reminders           Reminder[] // Reminders associated with this service (e.g., booking confirmation).
  resources           Resource[]            @relation("ServiceResources") // Resources (e.g., staff) assigned to this service.
  updatedAt           DateTime              @updatedAt // When the service was last updated.
  businessDetail      BusinessDetail?       @relation(fields: [businessDetailId], references: [id]) // Links to a business, if applicable.
  businessDetailId    String? // Business ID, null for individual services.
  individual           Individual? @relation(fields: [individualId], references: [id])       
  individualId        String?              
  isMultiResource     Boolean               @default(false) // True if multiple resources can handle the service simultaneously.
  shareableLinks      ShareableLink[] // Links for sharing specific or all time slots.
  ratings             Rating[] // Customer ratings for this service.
   meetings           Meeting[]
}

model ServiceAvailability {
  id        String        @id @default(cuid()) // Unique ID
  service   Service       @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Link to Service
  serviceId String // Foreign key
  weekDay   WeekDays // Day of the week (e.g., MONDAY)
  timeSlots ServiceTime[] // Available time slots for this day
}

model ServiceTime {
  id                    String              @id @default(cuid()) // Unique ID
  serviceAvailability   ServiceAvailability @relation(fields: [serviceAvailabilityId], references: [id], onDelete: Cascade)
  serviceAvailabilityId String // Foreign key
  startTime             String // e.g., "08:00:00" (24-hour)
  endTime               String // e.g., "17:00:00" (24-hour)
  isAvailable           Boolean             @default(true) // Whether the slot is available (e.g., false for vacations).
  shareableLinks        ShareableLink[] // Links for sharing this specific time slot.
}

// Type of service
enum ServiceType {
  PHYSICAL // In-person (e.g., at a salon).
  VIRTUAL // Online (e.g., via Zoom).
}


enum Status {
  ACTIVE
  INACTIVE
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

// -------- Notification & Reminders

enum ReminderType {
  REMINDER // Sent before appointment (e.g., 48h, 24h, 1h)
  FOLLOW_UP // Sent after appointment (e.g., feedback)
  CANCELLATION // Sent after cancellation
  MISSED // Sent after a missed appointment
  CUSTOM // Flexible, admin-defined timing
}


enum NotificationMethod {
  SMS
  EMAIL
  PUSH
}

model Reminder {
  id             String           @id @default(cuid()) // Unique ID
  type           ReminderType // Type of reminder
  title          String // Reminder title
  description    String? // Optional description
  message        String? // Optional message content
  services       Service[] // Services this reminder applies to
  notifications  Notification[] // Notification methods (SMS, EMAIL, PUSH)
  reminderOffset ReminderOffset[] // Offset timings for this reminder
}

model ReminderOffset {
  id                 String                      @id @default(cuid()) // Unique ID
  sendOffset         Int? // Offset in minutes (e.g., 2880 for 48 hours)
  sendBefore         Boolean // True if before appointment, false if after
  reminder           Reminder                    @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  reminderId         String // Foreign key
  appointmentOffsets AppointmentReminderOffset[] // Appointment-specific offsets
}

model AppointmentReminderOffset {
  id               String         @id @default(cuid()) // Unique ID
  appointment      Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId    String // Foreign key to Appointment
  reminderOffset   ReminderOffset @relation(fields: [reminderOffsetId], references: [id], onDelete: Cascade)
  reminderOffsetId String // Foreign key to ReminderOffset
  scheduledAt      DateTime // When this reminder should fire
 status           ReminderStatus @default(PENDING)
}

enum ReminderStatus {
  PENDING     // Not yet processed
  TRIGGERED   // Scheduled to be sent (e.g. via inngest ts)
  SENT        // Actually sent successfully
  FAILED      // Attempted but failed
}

model Notification {
  id         String             @id @default(cuid()) // Unique ID
  method     NotificationMethod // Notification type (SMS, EMAIL, PUSH)
  reminderId String // Foreign key
  reminder   Reminder           @relation(fields: [reminderId], references: [id], onDelete: Cascade)
}

// ------ Appointments

model Appointment {
  id           String            @id @default(cuid()) // Unique ID
  customerName String // Name of the customer
  email        String // Customer’s email
  phone        String // Customer’s phone
  status       AppointmentStatus @default(SCHEDULED) // Appointment status
  cancelledAt  DateTime? // Timestamp of cancellation, if applicable
  userId          String? // Optional user who booked for themselves
  user            User?                       @relation("BookedUser", fields: [userId], references: [id])
  bookedById      String? // Optional user who booked for someone else
  bookedBy        User?                       @relation("BookedBy", fields: [bookedById], references: [id])
  service         Service                     @relation(fields: [serviceId], references: [id])
  serviceId       String // Foreign key
  selectedDate    DateTime // Date of appointment
  selectedTime    String // Time of appointment
  message         String? // Optional notes
  isForSelf       Boolean                     @default(true) // True if booked for self
  createdBy       User                        @relation("CreatedBy", fields: [createdById], references: [id])
  createdById     String // User who created the appointment
  createdAt       DateTime                    @default(now()) // Creation timestamp
  updatedAt       DateTime                    @updatedAt // Last update timestamp
  resource        Resource?                   @relation(fields: [resourceId], references: [id])
  resourceId      String? // Optional resource (e.g., staff)
  reminderOffsets AppointmentReminderOffset[] // Appointment-specific reminders
   meeting         Meeting? @relation(fields: [meetingId], references: [id]) // Virtual meeting details, if applicable.
  meetingId       String?  @unique 
  shareableLinks  ShareableLink[] // Links for sharing this appointment's time slot.
}

// Appointment Status 
enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  MISSED
  CANCELLED
  FOLLOW_UP
}

// -------- Announcement 

model AnnouncementOrOffer {
  id          String  @id @default(cuid()) // Unique ID
  title       String // Announcement title
  description String? // Optional description
  message     String? // Optional message

  audience    TargetAudience // Who sees it (ALL, APPOINTED_USERS, etc.)
  isImmediate Boolean        @default(true) // Send immediately?
  scheduledAt DateTime // When to send/show
  showOn      Showon // Where to display (BANNER, PUSH, etc.)

  expiredAt ExpirationDuration @default(THIRTY_DAYS) // When it expires

  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt   DateTime @updatedAt
}

enum Showon {
  BANNER
  PUSH
  EMAIL
  SMS
  ALL
}

enum TargetAudience {
  ALL
  APPOINTED_USERS
  CANCELLED_USERS
}

enum ExpirationDuration {
  ONE_DAY
  THREE_DAYS
  SEVEN_DAYS
  THIRTY_DAYS
  NEVER
}

// Business Details
model BusinessDetail {
  id                         String            @id @default(cuid()) // Unique ID
  name                       String // Business name
  industry                   String // Industry type
  email                      String            @unique // Business email
  phone                      String // Business phone
  website                    String? // Optional website
  address                    BusinessAddress[] // Physical addresses
  businessRegistrationNumber String // Registration number               
  taxId                      String?
  taxIdFileId                String? 
  logo                       String? 
  logoFileId                 String? 
  status                     BusinessStatus    @default(PENDING) // Business status
  timeZone                   String?
  user          User?   @relation(fields: [businessOwner], references: [id], onDelete: Cascade)
  businessOwner String? // Optional link to business

  businessAvailability BusinessAvailability[] // Operating hours
  holiday              Holiday[] // Holidays

  createdAt             DateTime               @default(now()) // Creation timestamp
  updatedAt             DateTime               @updatedAt // Last update
  supportBusinessDetail SupportBusinessDetail? // Optional support details
  resources             Resource[] // Staff/resources
  services              Service[] // Services offered
}

model BusinessAddress {
  id         String                 @id @default(cuid()) // Unique ID
  street     String // Street
  city       String // City
  country    String // Country
  zipCode    String // Zip code
  googleMap  String // Google Maps link
  business   BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId String? // Optional link to business
  support    SupportBusinessDetail? @relation(fields: [supportId], references: [id], onDelete: Cascade)
  supportId  String? // Optional link to support
}


model BusinessAvailability {
  id                      String                 @id @default(cuid()) // Unique ID
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String? // Optional business link
  weekDay                 WeekDays // Day of week
  type                    AvailabilityType       @default(GENERAL) // GENERAL or SUPPORT
  timeSlots               BusinessTime[] // Available times
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id], onDelete: Cascade)
  supportBusinessDetailId String? // Optional support link
}

enum AvailabilityType {
  GENERAL
  SUPPORT
}

enum BusinessTimeType {
  WORK
  BREAK
}

model BusinessTime {
  id                     String               @id @default(cuid()) // Unique ID
  businessAvailability   BusinessAvailability @relation(fields: [businessAvailabilityId], references: [id], onDelete: Cascade)
  type                   BusinessTimeType      @default(WORK)
  businessAvailabilityId String // Foreign key
  startTime              String // e.g., "08:00:00" (24-hour)
  endTime                String // e.g., "17:00:00" (24-hour)
}

model Holiday {
  id                      String                 @id @default(cuid()) // Unique ID
  business                BusinessDetail?        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId              String? // Optional business link
  holiday                 WeekDays // Holiday day
  type                    HolidayType            @default(GENERAL) // GENERAL or SUPPORT
  date                    DateTime? // Specific date, if applicable
  SupportBusinessDetail   SupportBusinessDetail? @relation(fields: [supportBusinessDetailId], references: [id])
  supportBusinessDetailId String? // Optional support link
}

enum HolidayType {
  GENERAL
  SUPPORT
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

// ------- Support and Help

model SupportBusinessDetail {
  id                  String                 @id @default(cuid()) // Unique ID
  supportBusinessName String // Support team name
  supportEmail        String                 @unique // Support email
  supportPhone        String // Support phone
  supportGoogleMap    String? // Optional Google Maps link
  supportAvailability BusinessAvailability[] // Support hours
  supportHoliday      Holiday[] // Support holidays
  // supportAddress      BusinessAddress[] // Support addresses
  supportAddress      String // Support addresses

  business        BusinessDetail    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  businessId      String            @unique // Link to business
  BusinessAddress BusinessAddress[]
}


//----- FAQ

model FAQ {
  id        String   @id @default(cuid()) // Unique ID
  question  String // FAQ question
  answer    String // FAQ answer
  category  String? // Optional category
  isActive  Boolean  @default(true) // Active status
  order     Int? // Optional display order
  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Last update

  lastUpdatedById String // ID of user who last updated
  User            User   @relation(fields: [createdById], references: [id])
  createdById     String // ID of user who created
}

// -- Ticket

model Ticket {
  id                String       @id @default(cuid()) // Unique ID
  userType          Role // Type of user (USER, ADMIN, etc.)
  subject           String // Ticket subject
  ticketDescription String // Ticket details
  category          String // Ticket category
  priority          Priority     @default(MEDIUM) // Priority level
  status            TicketStatus @default(OPEN) // Ticket status

  createdAt             DateTime @default(now()) // Creation timestamp
  updatedAt             DateTime @updatedAt // Last update
  assignedTo            String? // Optional assignee
  resolutionDescription String? // Optional resolution notes
  proofFiles            String? // Optional file links

  initiatedById String? // Optional initiator
  userId        String // User who raised ticket
  user          User    @relation(fields: [userId], references: [id])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// -------- Resources

model Resource {
  id         String         @id @default(cuid()) // Unique ID
  name       String // Resource name (e.g., staff)
  email      String         @unique // Resource email
  phone      String // Resource phone
  role       String // Resource role
  address    String? // Optional address
  businessId String // Link to business
  business   BusinessDetail @relation(fields: [businessId], references: [id], onDelete: Cascade)
  serviceId  String 
  service   Service  @relation("ServiceResources", fields: [serviceId], references: [id])
  appointments Appointment[] // Appointments assigned to resource
  shareableLinks ShareableLink[] // Links for sharing this resource's time slots.


  createdAt DateTime @default(now()) // Creation timestamp
  updatedAt DateTime @updatedAt // Last update
}

// -------- Individual

model Individual {
  id             String   @id @default(cuid())
  userId         String   @unique
  bio            String?
  position       String     // e.g. "Product Designer", "Marketing Coach"
  profileImage   String?
  imageFileId    String?
  country        String 
  timezone      String  @default("UTC")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  services        Service[]  
  videoIntegrations VideoIntegration[]
  company        String?  // Organization they work for
  website        String?  // Personal/company website
  linkedinUrl   String?
  address         Address?  
  addressId       Int?       @unique // Address ID.
  experiences     Experience[] // Past experiences or certifications for credibility.
}

// Stores past experiences or certifications for an individual.
model Experience {
  id            String     @id @default(cuid()) // Unique ID for the experience.
  individualId  String // Individual ID.
  individual    Individual @relation(fields: [individualId], references: [id], onDelete: Cascade) // Links to the individual.
  company       String? // Optional company name (e.g., "Freelance" or "Google").
  role          String // Role (e.g., "Senior Consultant").
  description   String? // Optional description of responsibilities or achievements.
  startDate     String? // Optional start date.
  endDate       String? // Optional end date, null if ongoing.
  isCertification Boolean  @default(false) // True if this is a certification (e.g., "Certified Scrum Master").
  createdAt     DateTime @default(now()) // Creation timestamp.
  updatedAt     DateTime @updatedAt // Last updated timestamp.
}


enum VideoProvider {
  ZOOM
  GOOGLE_MEET
  MICROSOFT_TEAMS
  WEBEX
  GOTO_MEETING
}

model VideoIntegration {
  id                  String        @id @default(cuid())
  individualId        String
  provider            VideoProvider
  accessToken         String
  refreshToken        String?
  expiresAt           DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  individual          Individual    @relation(fields: [individualId], references: [id])
  
  @@unique([individualId, provider])
}

enum EventType {
  ONE_TO_ONE
  GENERAL
}


// Represents a shareable link for booking time slots or viewing availability.
model ShareableLink {
  id              String        @id @default(cuid()) // Unique ID for the link.
  location        String       // e.g. Zoom, Google Meet
  slug            String        @unique // Unique URL slug (e.g., "/link/abc123").
  type           EventType       
  appointmentId   String? // Appointment ID, if linked to a specific appointment.
  appointment     Appointment?  @relation(fields: [appointmentId], references: [id], onDelete: Cascade) // Links to the appointment.
  serviceId       String? // Service ID.
  service         Service?      @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Links to the service.
  resourceId      String? // Resource ID, for multi-resource services.
  resource        Resource?     @relation(fields: [resourceId], references: [id], onDelete: Cascade) // Links to the resource.
  serviceTimeId   String? // Time slot ID, for single-slot links.
  serviceTime     ServiceTime?  @relation(fields: [serviceTimeId], references: [id], onDelete: Cascade) // Links to the time slot.
  date            DateTime? // Specific date for the link (e.g., for DAILY_SLOTS).
  dateRangeEnd    DateTime? // End date for multi-day links (e.g., for MULTI_DAY_SLOTS).
  linkType        LinkType      @default(SINGLE_SLOT) // Type of link (SINGLE_SLOT, DAILY_SLOTS, MULTI_DAY_SLOTS).
  metaTitle       String? // SEO title for the link (e.g., "Book a Coaching Session").
  metaDescription String? // SEO description for the link.
  createdAt       DateTime      @default(now()) // Creation timestamp.
  expiresAt       DateTime? // Optional expiration date for the link.
  videoUrl        String?       // For one-to-one direct link
}

// Type of shareable link.
enum LinkType {
  SINGLE_SLOT // Link for a single time slot (e.g., "May 28, 2025, 10:00 AM").
  DAILY_SLOTS // Link for all time slots on a specific day (e.g., "All slots on May 28").
  MULTI_DAY_SLOTS // Link for all time slots across multiple days (e.g., "Next 7 days").
}

model Meeting {
  id             String   @id @default(cuid())
  serviceId    String
  startTime      DateTime @default(now()) // Default to current time
  endTime DateTime @default(dbgenerated("NOW() + interval '1 hour'")) // When the meeting ends
  bookedByName   String
  bookedByEmail  String
  bookerTimezone String?        // Store the timezone of the person booking
  customAnswers  Json?
  videoUrl       String?
  videoProvider  VideoProvider?
  slug           String? @unique
 service       Service?       @relation(fields: [serviceId], references: [id]) // Links to the service.
  appointment   Appointment?  
  appointmentId String? // Appointment ID.
}

// Stores customer ratings for services.
model Rating {
  id        String    @id @default(cuid()) // Unique ID for the rating.
  serviceId String // Service ID.
  service   Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade) // Links to the service.
  userId    String // User ID.
  user      User      @relation("UserRatings", fields: [userId], references: [id]) // Links to the user.
  score     Int // Rating score (1-5 stars).
  review    String? // Optional review text.
  createdAt DateTime  @default(now()) // Creation timestamp.
  updatedAt DateTime  @updatedAt // Last updated timestamp.
}

